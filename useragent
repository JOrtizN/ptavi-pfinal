#!/usr/bin/python3
# -*- coding: utf-8 -*-

import socketserver
import socket #uaclient
import sys
import os
from xml.sax import make_parser
from xml.sax.handler import ContentHandler


if len(sys.argv) == 3:
    ua = sys.argv[1]
    #Config[]
else:
    sys.exit("Usage: python uaserver.py config")


class UserAgent(ContentHandler):
    """Sacar puertos e ips. """
    def __init__(self):
        """Diccionario"""
        self.diccConfig = {"account":["username", "passwd"],
                              "uaserver": ["ip","puerto"],
                              "rtpaudio":["puerto"],
                              "regproxy":["ip","puerto"],
                              "log": ["path"],
                              "audio": ["path"]}
        self.Config = {}

    def startElement(self, name, attrs):
#print(self.Config)
        if name in self.diccConfig:
            print("hola")
            for info in self.diccConfig[name]:
                self.Config[name + '_' + info] = attrs.get(info, "")

    def get_tags(self):
        return self.Config

class EchoHandler(socketserver.DatagramRequestHandler):
    """Echo server class."""
    if sys.argv[0] == "uaserver.py":
        def handle(self):
            """Filtrar por m√©todos."""
            for line in self.rfile:
                llega = line.decode('utf-8').split(" ")
                method = llega[0]

                try:
                    arroba = llega[1].find("@") == -1
                    fsip = str(llega[1].split(":")[0]) != "sip"
                    lsip = str(llega[2]) != "SIP/2.0\r\n"
                    if (fsip or arroba or lsip):
                        print("SIP/2.0 400 Bad Request\r\n\r\n")
                        self.wfile.write(b"SIP/2.0 400 Bad Request\r\n\r\n")
                        break
                except IndexError:
                    pass

                if len(llega) == 3:
                    if method not in ['INVITE', 'BYE', 'ACK']:
                        self.wfile.write(b'SIP/2.0 405 Method Not Allowed\r\n')
                        break

                    if method == "INVITE":
                        print("El cliente nos manda " + line.decode('utf-8'))
                        self.wfile.write(b"SIP/2.0 100 Trying\r\n\r\n")
                        self.wfile.write(b"SIP/2.0 180 Ringing\r\n\r\n")
                        self.wfile.write(b"SIP/2.0 200 OK\r\n\r\n")

                    elif method == "ACK":
                        print("El cliente nos manda " + line.decode('utf-8'))
                        aEjecutar = 'mp32rtp -i 127.0.0.1 -p 23032 < ' + f_audio
                        print("Vamos a ejecutar", aEjecutar)
                        os.system(aEjecutar)
                        print("Cancion enviada")

                    elif method == "BYE":
                        print("El cliente nos manda " + line.decode('utf-8'))
                        self.wfile.write(b"SIP/2.0 200 OK \r\n\r\n")

                else:
                    break




if __name__ == "__main__":

    parser = make_parser()
    sHandler = UserAgent()
    parser.setContentHandler(sHandler)
    #parser.parse(open('ua2.xml'))
    parser.parse(open(ua))
    Config = sHandler.get_tags()
    #print(Config['account_username'])
    IP = Config['uaserver_ip']
    PORT = Config['uaserver_puerto']
    f_audio = Config['audio_path']
    METHOD = ""
#UA server
    serv = socketserver.UDPServer((IP, PORT), EchoHandler)
    print("Listening...")
    try:
        serv.serve_forever()
    except KeyboardInterrupt:
        print("Finalizado servidor")
#UA client
    if sys.argv[0] == "uaclient.py":

    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as my_socket:
        my_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

        if len(sys.argv) == 4:
            METHOD = sys.argv[2]
            ua = sys.argv[1]
            opcion = sys.argv[3]
        else:
            sys.exit("Usage: python3 client.py method receiver@IP:SIPport")
        try:
            USER = sys.argv[2].split("@")[0]
            IP = sys.argv[2].split("@")[1].split(":")[0]
            PORT = int(sys.argv[2].split("@")[1].split(":")[1])
            my_socket.connect((IP, PORT))
            my_socket.send(bytes(METHOD + " sip:" + USER + "@" + IP +
                                 " SIP/2.0", 'utf-8') + b'\r\n\r\n')
        except IndexError:
            sys.exit("Usage: Error in -> receiver@IP:SIPport <-")

        data = my_socket.recv(1024)
        n_data = data.decode('utf-8').split()
        print(data.decode('utf-8'))

        if n_data[1] == "100" and n_data[4] == "180" and n_data[7] == "200":
            print("Send ACK, if you have to wait your request is okey")
            my_socket.send(bytes("ACK" + " sip:" + USER + "@" + IP +
                           " SIP/2.0", 'utf-8') + b'\r\n\r\n')
            data = my_socket.recv(1024)
            n_data = data.decode('utf-8').split()
            try:
                if n_data[1] == "400" or n_data[1] == "405":
                    print(data.decode('utf-8'))
            except IndexError:
                pass

        print("Terminando socket...")

    print("Fin.")
